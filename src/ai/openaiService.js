import OpenAI from "openai";
import fs from "fs";
import { fileURLToPath } from "url";
import path from "path";
import { changeLanguageTools } from "./tools/changeLanguageTools.js";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
const brandData = fs.readFileSync(
  path.join(__dirname, "../data/brand.md"),
  "utf-8"
);

const faqData = JSON.parse(
  fs.readFileSync(path.join(__dirname, "../data/faq.json"), "utf-8")
);

export async function generateReply(userMessage, history, lang) {
  const client = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

  // 1. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º FAQ –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
  const faqString = faqData
    .filter((f) => f.lang === lang) // –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
    .map((f) => `Q: ${f.q}\nA: ${f.a}`)
    .join("\n\n");

  // 2. –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  const systemMessage = {
    role: "system",
    content: `
–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã Velvet Glow.
–ì–æ–≤–æ—Ä–∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ, –Ω–æ –±–µ–∑ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –æ–±–µ—â–∞–Ω–∏–π.
–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –Ω–∞ —è–∑—ã–∫–µ –∫–ª–∏–µ–Ω—Ç–∞ (${lang}).
    `,
  };

  // 3. –ö–æ–Ω—Ç–µ–∫—Å—Ç (–±—Ä–µ–Ω–¥ + FAQ)
  const contextMessage = {
    role: "assistant",
    content: `
üìñ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:
${brandData}

‚ùì –ß–ê–í–û:
${faqString}
    `,
  };

  // 4. –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
  const messages = [
    systemMessage,
    contextMessage,
    ...history, // –∏—Å—Ç–æ—Ä–∏—è –∏–∑ –±–∞–∑—ã
    { role: "user", content: userMessage }, // –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  ];

  // 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
  const response = await client.chat.completions.create({
    model: "gpt-4o-mini",
    messages,
    tools: changeLanguageTools,
  });

  const reply = response.choices[0].message.content;

  return reply;
}
